[project]
name = "forth-ai-underwriting"
version = "0.1.0"
description = "AI-powered underwriting validation system for Forth Debt Resolution"
authors = [
    {name = "Nedal Altiti", email = "nedal.a@usclarity.com"}
]
requires-python = ">=3.11"

dependencies = [
    # Web Framework
    "fastapi~=0.111.0",
    "uvicorn[standard]~=0.30.1",
    
    # Configuration & Settings
    "pydantic-settings~=2.3.3",
    "python-dotenv~=1.0.1",
    
    # Database & ORM
    "sqlalchemy~=2.0.21",
    "alembic~=1.12.0",
    "asyncpg~=0.29.0",  # PostgreSQL async driver
    "psycopg2-binary~=2.9.7",  # PostgreSQL sync driver
    
    # Caching & Message Queue
    "redis~=4.6.0",
    "celery~=5.3.1",
    
    # HTTP Client & API
    "httpx~=0.27.0",
    
    # Logging & Monitoring
    "loguru~=0.7.2",
    "prometheus-client~=0.17.1",
    "structlog~=23.1.0",
    
    # Date & Time
    "python-dateutil~=2.9.0.post0",
    
    # Data Processing & Validation
    "pydantic~=2.7.0",
    "pydantic-extra-types~=2.1.0",
    
    # Security & Authentication
    "python-jose[cryptography]~=3.3.0",
    "passlib[bcrypt]~=1.7.4",
    "python-multipart~=0.0.6",
    
    # AI/ML Libraries
    "openai~=1.10.0",
    "azure-ai-formrecognizer~=3.3.0",
    "azure-identity~=1.14.0",
    "tiktoken~=0.5.1",
    
    # LangChain Ecosystem
    "langchain~=0.1.0",
    "langchain-core~=0.1.0",
    "langchain-community~=0.0.20",
    "langchain-google-genai~=0.0.6",
    "langchain-openai~=0.0.5",
    "langchain-text-splitters~=0.0.1",
    
    # Google AI/Gemini
    "google-generativeai~=0.3.2",
    "google-ai-generativelanguage~=0.4.0",
    "google-cloud-aiplatform~=1.38.1",
    
    # Document Processing
    "pypdf2~=3.0.1",
    "pymupdf~=1.23.14",  # PyMuPDF for better PDF processing
    "python-magic~=0.4.27",
    "pillow~=10.0.0",
    "aiofiles~=23.2.1",
    
    # AWS Services
    "boto3~=1.26.0",  # AWS SDK
    "botocore~=1.29.0",  # AWS Core
    
    # Utilities
    "tenacity~=8.2.3",  # Retry logic
    "click~=8.1.7",  # CLI support
    "rich~=13.5.2",  # Beautiful CLI output
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest~=8.2.2",
    "pytest-asyncio~=0.23.7",
    "pytest-cov~=4.1.0",
    "pytest-mock~=3.11.1",
    "httpx~=0.27.0",  # For testing async HTTP
    
    # Code Quality
    "black~=23.7.0",
    "ruff~=0.0.287",
    "mypy~=1.5.1",
    "pre-commit~=3.4.0",
    
    # Documentation
    "mkdocs~=1.5.2",
    "mkdocs-material~=9.2.3",
    
    # Development Tools
    "uv~=0.1.36",
    "ipython~=8.15.0",
    "jupyter~=1.0.0",
]

prod = [
    # Production monitoring
    "gunicorn~=21.2.0",
    "sentry-sdk[fastapi]~=1.31.0",
    
    # Performance
    "uvloop~=0.17.0",  # Faster event loop
    "orjson~=3.9.5",  # Faster JSON
]

[project.scripts]
forth-underwriting = "forth_ai_underwriting.cli.main:app"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.uv]
dev-dependencies = []

[tool.pytest.ini_options]
pythonpath = "src"
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=forth_ai_underwriting",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80"
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


